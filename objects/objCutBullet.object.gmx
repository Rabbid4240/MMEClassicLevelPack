<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCutShot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = 0;
grav = 0;

stopOnFlash = false;

contactDamage = 2;

spd = 3;

phase = 1;

image_speed = (-1 / 4);

reflectable = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (phase == 1)
    {
        if (target)
        {
            var angle;
            angle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                spriteGetXCenterObject(target),
                spriteGetYCenterObject(target));
            
            xspeed = cos(degtorad(angle)) * spd;
            yspeed = -sin(degtorad(angle)) * spd;
        }
        else
        {
            xspeed = spd;
            yspeed = 0;
        }
        phase = 2;
    }
    else if (phase == 2)
    {
        if (x &lt; view_xview + 8 || x &gt; view_xview + view_wview - 8 || y &lt; view_yview + 8 || y &gt; view_yview + view_hview - 8)
        {
            phase = 3;
        }
    }
    else
    {
        if (instance_exists(objCutMan))
        {
            var angle;
            angle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                spriteGetXCenterObject(objCutMan),
                spriteGetYCenterObject(objCutMan));
            
            xspeed = cos(degtorad(angle)) * spd;
            yspeed = -sin(degtorad(angle)) * spd;
            if (place_meeting(x, y, objCutMan))
            {
                instance_destroy();
            }
        }
    }
    
    image_speed = (-1 + ((phase &gt; 2) * 2)) / 4;
    
    // Play audio as long as Rolling Cutter can move
    if (!audio_is_playing(sfxRollingCutter))
    {
        playSFX(sfxRollingCutter);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
