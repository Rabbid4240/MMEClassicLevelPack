<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTheKeeperHand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
reflectable = 0;
animSpeed = 0.065;
image_speed = animSpeed;
phase = 0;
isTargetable = false;
dir = 1;
subPhase = 0;
grav = 0;
isSolid = 1;
contactDamage = 0;
timer = 0;
fallOnPlayer = true;
canHit = true;
faction = 7;
parent = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    target = instance_nearest(x, y, objMegaman);
    image_xscale = dir;
    switch (phase)
    {
        case 0: // First pattern move near the center and smack the ground 
            if (subPhase == 0 &amp;&amp; image_speed == 0) // Start moving after it's animation is done
            {
                if (((dir &gt; 0 &amp;&amp; x &lt; xstart + dir * 80) || (dir &lt; 0 &amp;&amp; x &gt; xstart + dir * 80)) &amp;&amp; (!fallOnPlayer || (fallOnPlayer &amp;&amp; instance_exists(target) &amp;&amp; !((dir == 1 &amp;&amp; x - 24 &gt; target.x) || (dir == -1 &amp;&amp; x + 24 &lt; target.x)))))
                {
                    xspeed = dir * 3;
                }
                else
                {
                    subPhase = 1;
                    
                    xspeed = 0;
                    timer = 0;
                }
            }
            else if (subPhase == 1) // Smack the ground
            {
                if (timer &gt;= 0)
                {
                    timer += 1;
                    if (timer &gt; 10)
                    {
                        grav = 0.25;
                        yspeed = -2.5; // do a little jump before going down
                        timer = -1;
                    }
                }
                if (ground)
                {
                    subPhase = 2;
                    timer = 0;
                    event_user(0); // Create shockwaves
                }
            }
            else if (subPhase == 2) // Going back to its starting y position, will move back until it collides
            {
                if (timer &gt;= 0)
                    timer += 1;
                if (timer &gt; 30)
                {
                    timer = -1;
                    grav = 0;
                }
                if (timer == -1)
                {
                    if (y &gt; ystart)
                        yspeed = -2.5;
                    else
                    {
                        xspeed = -dir * 1.5;
                        yspeed = 0;
                    }
                    if ((sign(xstart - x) == -sign(xspeed)) || xcoll != 0)
                    {
                        image_speed = -animSpeed;
                        xspeed = 0;
                        timer = -2;
                    }
                }
            }
            break;
        case 2: // phase 2 and 1 makes it move a bit forward and then smacks the ground, after that in phase 2 it will come back;
        case 1: // but in phase 1 it will move forward untill it collides with a wall, then it will come back; 
            if (subPhase == 0 &amp;&amp; image_speed == 0)
            {
                if ((dir &gt; 0 &amp;&amp; x &lt; xstart + dir * 42) || (dir &lt; 0 &amp;&amp; x &gt; xstart + dir * 42)) // advance
                {
                    xspeed = dir * 3;
                }
                else
                {
                    subPhase = 1;
                    grav = 0;
                    yspeed = 0;
                    xspeed = 0;
                }
            }
            else if (subPhase == 1)
            {
                if (timer &gt;= 0)
                {
                    timer += 1;
                    if (timer &gt; 10) // fall
                    {
                        grav = 0.25;
                        yspeed = -1.5;
                        timer = -1;
                    }
                }
                else if (timer &lt;= -2) // I was too lazy to make new variables, so I used the timer for everything
                {
                    timer -= 1;
                }
                if (ground)
                {
                    if (timer == -1)
                    {
                        event_user(0); // Create shockwaves
                        timer = -2;
                    }
                    if (xcoll != 0)
                    {
                        if ((dir == 1 &amp;&amp; x &gt; xstart + 160) || (dir == -1 &amp;&amp; x &lt; xstart - 160)) // if it advanced enough it means it collided with the wall
                        {
                            timer = -100;
                        }
                    }
                    if (xcoll == 0 &amp;&amp; timer &gt; -100 &amp;&amp; timer &lt; -30)
                    {
                        if (phase == 1)
                        {
                            if (timer == -31)
                                xspeed = -2.5 * dir;
                            if (abs(xspeed) &lt; abs(dir * 3))
                                xspeed += dir * 0.2;
                            else
                                xspeed = dir * 3;
                        }
                    }
                    else if (timer &gt; -100 &amp;&amp; timer &lt; -30 || phase == 2)
                    {
                        if (phase == 2) // if phase 2 come back immediately
                        {
                            phase = 0;
                            subPhase = 2;
                            timer = 0;
                            grav = 0;
                        }
                        else
                        {
                            with (objTheKeeperHand) // make sure it's synchroined with the other when in phase 1
                            {
                                if (phase == 1)
                                {
                                    phase = 0;
                                    subPhase = 2;
                                    timer = 0;
                                    grav = 0;
                                }
                            }
                            playSFX(sfxTheKeeperFistClash);
                        }
                    }
                    if (timer &lt; -130) // if it advanced enough and collided with a wall it moves back for a bit and then goes up
                    {
                        xspeed = -dir * 1.5;
                        if (timer &lt; -150)
                        {
                            phase = 0;
                            subPhase = 2;
                            timer = -1;
                            grav = 0;
                            xspeed = 0;
                        }
                    }
                }
            }
            
            break;
    }
    
    // Prevent crushing the player
    
    var crushedPlayer = false;
    
    if (!instance_exists(target) &amp;&amp; instance_exists(objMegaman))
    {
        with (objMegaman)
            other.target = self;
    }
    if (instance_exists(target) &amp;&amp; yspeed &gt; 0)
    {
        var ysp = 3;
        
        
        ysp += abs(target.yspeed);
        var targetHasGround = false;
        with (target)
        {
            if (checkSolid(0, 3 + abs(yspeed)))
            {
                targetHasGround = true;
            }
        }
        if (place_meeting(x, y + abs(yspeed) + ysp, target) &amp;&amp; targetHasGround)
        {
            crushedPlayer = true;
            contactDamage = 4;
            with (target)
            {
                if (canHit &amp;&amp; iFrames == 0)
                {
                    with (other)
                    {
                        entityEntityCollision();
                    }
                }
                yspeed = 0;
            }
            yspeed = 0;
        }
    }
    
    if (xspeed != 0 &amp;&amp; !crushedPlayer)
    {
        if (instance_exists(target))
        {
            var xsp = sign(xspeed);
            if (target.xspeed != 0 &amp;&amp; sign(target.xspeed) * xsp == 1)
                xsp += target.xspeed;
            var nearSolid = false;
            
            with (target)
            {
                var lhand = collision_rectangle(bbox_left - 8, bbox_top, x - 4, bbox_bottom, objTheKeeperHand, false, false);
                var rhand = collision_rectangle(x + 8, bbox_top, bbox_right + 4, bbox_bottom, objTheKeeperHand, false, false);
                if (collision_rectangle(bbox_left - 4 - abs(xsp), bbox_top, bbox_right + 4 + abs(xsp), bbox_bottom, objSolid, false, false) || ((lhand != noone &amp;&amp; lhand != other) || (rhand != noone &amp;&amp; rhand != other)))
                {
                    nearSolid = true;
                }
            }
            if (nearSolid &amp;&amp; place_meeting(x + ceil(xspeed) + 4 * sign(xspeed), y, target))
            {
                crushedPlayer = true;
                contactDamage = 4;
                with (target)
                {
                    if (canHit &amp;&amp; iFrames == 0)
                    {
                        with (other)
                            entityEntityCollision();
                    }
                }
            }
        }
    }
    if (crushedPlayer)
    {
        image_speed = -animSpeed;
        yspeed = 0;
        grav = 0;
        xspeed = 0;
        contactDamage = 0;
        phase = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
global.damage = 0;
other.guardCancel = 3;
if (other.object_index == objWaterShield)
    other.guardCancel = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make Shockwaves
var sw = instance_create(x + (abs(bbox_left - bbox_right) * 0.5), bbox_bottom, objTheKeeperShockwave);
sw.xspeed = 2;
var sw = instance_create(x - (abs(bbox_left - bbox_right) * 0.5), bbox_bottom, objTheKeeperShockwave);
sw.xspeed = -2;
screenShake(40, 1, 1);
with (objMegaman)
    playerGetShocked(false, 0, true, 40);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_speed &gt; 0)
{
    image_speed = 0;
    image_index = image_number - 1;
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
