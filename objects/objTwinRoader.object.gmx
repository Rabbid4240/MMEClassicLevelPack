<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTwinRoaderGreen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code (all optional)
// col = &lt;number&gt; (0 = green (default); 1 = orange; 2 = blue)

event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "grounded";

facePlayerOnSpawn = true;

// Enemy specific code
col = 0;

phase = 0;
timer = 0;
turnRange = 64;
trackStop = false;
spd = 1.5;

turn = false;

imgSpd = 0.2;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        switch (phase)
        {
            // drive around
            case 0:
                imgIndex += imgSpd;
                if (imgIndex &gt;= 2)
                {
                    imgIndex = imgIndex mod 2;
                }
                turn = false;
                if (ground)
                {
                    if (xspeed == 0)
                    {
                        turn = true;
                        
                        /* basically if turned around by a wall when going towards
                        mega man, make it so we don't turn around from being away
                        from mega man until we hit another wall */
                        if (!trackStop)
                        {
                            if (instance_exists(target))
                            {
                                if ((x &gt; target.x &amp;&amp; image_xscale &lt; 0)
                                    || (x &lt;= target.x &amp;&amp; image_xscale &gt; 0))
                                {
                                    trackStop = true;
                                }
                            }
                        }
                        else
                        {
                            trackStop = false;
                        }
                    }
                    
                    if (!trackStop &amp;&amp; instance_exists(target))
                    {
                        // mega man has to be relatively above or on the same level for it to turn
                        if (target.y &lt; y + 8 &amp;&amp; ((target.x &lt; x - turnRange
                            &amp;&amp; image_xscale &gt; 0)
                            || (target.x &gt; x + turnRange
                            &amp;&amp; image_xscale &lt; 0)))
                        {
                            turn = true;
                        }
                    }
                    
                    if (turn)
                    {
                        phase = 1;
                        xspeed = 0;
                        imgIndex = 2;
                    }
                    else
                    {
                        xspeed = spd * image_xscale;
                    }
                }
                else
                {
                    xspeed = 0;
                }
                break;
            
            // turn around
            case 1:
                imgIndex += imgSpd * 0.65;
                if (imgIndex &gt;= 5)
                {
                    phase = 0;
                    imgIndex = 0;
                    image_xscale = -image_xscale;
                    xspeed = spd * image_xscale;
                }
                break;
        }
    }
    image_index = imgIndex div 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();
phase = 0;
timer = 0;
imgIndex = 0;
if (spawned)
{
    xspeed = spd * image_xscale;
    turn = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// creation code setup
switch (col)
{
    case 0:
        sprite_index = sprTwinRoaderGreen;
        break;
    case 1:
        sprite_index = sprTwinRoaderOrange;
        break;
    case 2:
        sprite_index = sprTwinRoaderBlue;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
