<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPicketMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// An enemy originating from Guts Man's stage. Will wait to drop its shield, and once it does, it will throw
// out a pseudo-random amount of arcing pickaxes. Note that the health of this enemy is purposefully
// inaccurate to original MM1 - this is to make it a little more tolerable to address complaints after MaGMML2.

event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "joes, rocky";

// enemy should jump in from the side of the room when spawned, if possible?
jumpsIn = true;
jumpDistance = 48;

// Enemy specific code
timer = 0;
phase = 1;
bullet = 0;

shootAmountMax = 0;

facePlayer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// jumping in spawn logic:
if (dead)
{
    if (!jumpsIn)
    {
        respawnRange = 4;
    }
    else
    {
        respawnRange = -jumpDistance;
        if (xstart + (bbox_left - x) + jumpDistance - 2 &gt; view_xview[0] + view_wview[0]
            || xstart + (bbox_right - x) - jumpDistance + 2 &lt; view_xview[0])
        {
            beenOutsideView = true;
        }
    }
}

event_inherited();

if (entityCanStep())
{
    if (abs(y - ystart) &lt;= yspeed + grav) // land
    {
        blockCollision = true;
        xspeed = 0;
    }
    
    timer += 1;
    
    if (phase == 1) // wait a bit
    {
        if (timer &gt;= 120) // start pickaxe flurry
        {
            timer = 0;
            phase = 2;
            image_index = 1;
            
            // randomize();
            bulletMax = choose(5, 10); // randomize amount of pickaxes
        }
    }
    else // Throw
    {
        if (timer == 15)
        {
            image_index = 2;
            var i = instance_create(x + image_xscale * 16, spriteGetYCenter(), objPicket);
            i.image_xscale = image_xscale; // shoot
            bullet += 1;
        }
        else if (timer == 30)
        {
            image_index = 1;
            timer = 0;
            if (bullet &gt;= bulletMax) // reset after passing amount max
            {
                image_index = 0;
                phase = 1;
                bullet = 0;
            }
        }
    }
}
else if (dead)
{
    timer = 0;
    phase = 1;
    bullet = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// jump in from side

event_inherited();

if (spawned &amp;&amp; jumpsIn &amp;&amp; respawn)
{
    y -= 16;
    yspeed = -3;
    
    if (x &lt; view_xview[0] + view_wview[0] / 2)
    {
        x = view_xview[0] - 8;
    }
    else
    {
        x = view_xview[0] + view_wview[0] + 8;
    }
    
    blockCollision = false;
    
    xspeed = xSpeedAim(x, y, xstart, ystart);
    if (shootAmountMax == 0)
    {
        shootAmountMax = choose(5, 10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if image_index == 0 (frame with shield being up), reflect the bullets
if (image_index == 0)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
