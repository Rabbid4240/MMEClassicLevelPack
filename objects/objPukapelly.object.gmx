<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPukapelly</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// col = &lt;number&gt; (0 = teal (default); 1 = purple; 2 = red; 3 = blue; 4 = orange; 5 = green;)

event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "cluster, floating";

blockCollision = 0;
grav = 0;

// Enemy specific code
col = 0;


phase = 0;
chgPhases = 0;
lockMovement = 0;
xLock = 0;
yLock = 0;
xCont = 0;
yCont = 0;
toggle = 0;

// cos and sine movement
cY = y;
cDistance = 2;
cAngle = 0;
addAngle = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // timer
    chgPhases += 1;
    if (chgPhases &gt;= 31) //-( phase*16)
    {
        chgPhases = 0;
        phase += 1;
    }
    
    // phase 0 - bob up and down in place
    if (phase == 0)
    {
        image_index = (col * 2);
        y = ceil(cY + cos(cAngle) * cDistance);
        cAngle += addAngle;
    }
    
    // lock movement
    if (phase == 1 &amp;&amp; lockMovement == 0)
    {
        y = cY;
        lockMovement = 1;
        if (instance_exists(target))
        {
            xLock = ceil(target.x / 16) * 16;
            yLock = ceil(target.y / 16) * 16;
            
            // Set whether or not xContinue is set or not. This means that Pukapelly will continue moving if he reaches Mega Man's x co-ordinate.
            if (x &gt;= target.x - 3 &amp;&amp; x &lt;= target.x + 3)
                xCont = 0;
            else
                xCont = target.x - x;
            
            // Set whether or not yContinue is set or not. This means that Pukapelly will continue moving if he reaches Mega Man's y co-ordinate.
            if (y &gt;= target.y - 3 &amp;&amp; y &lt;= target.y + 3)
                yCont = 0;
            else
                yCont = target.y - y;
        }
        
        // Set direction of sprite
        if (xLock &lt; x)
        {
            image_xscale = -1;
        }
        else
        {
            image_xscale = 1;
        }
    }
    
    // phase 1 - follow mega man
    if (phase == 1)
    {
        image_index = (col * 2) + 1;
        cAngle = 0;
        
        // if pukapelly reaches xLock or yLock, add to xLock and yLock so he keeps moving.
        if (x &lt;= xLock &amp;&amp; xCont &lt;= -1)
            xLock = x - 16;
        if (x &gt;= xLock &amp;&amp; xCont &gt;= 1)
            xLock = x + 16;
        if (y &lt;= yLock &amp;&amp; yCont &lt;= -1)
            yLock = y - 16;
        if (y &gt;= yLock &amp;&amp; yCont &gt;= 1)
            yLock = y + 16;
        
        // lock onto xLock and yLock.
        mp_linear_step(xLock, yLock, 2, false);
        cY = y;
    }
    
    // otherwise reset to phase 1
    if (phase == 2)
    {
        phase = 0;
        lockMovement = 0;
    }
}
else if (dead)
{
    chgPhases = 0;
    cY = ystart;
    phase = 0;
    cAngle = 0;
    xLock = 0;
    yLock = 0;
    yCont = 0;
    lockMovement = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objJewelSatellite, 2);
specialDamageValue(objGrabBuster, 2);
specialDamageValue(objTripleBlade, 2);
specialDamageValue(objWheelCutter, 2);
specialDamageValue(objSlashClaw, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
