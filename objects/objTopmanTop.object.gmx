<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTopmanTop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = 0;
grav = 0;
stopOnFlash = false;
contactDamage = 4;
stopAtSolid = false;

grav = 0;

number = 0;

spd = 5.5;
phase = 0; // 0 = idling; 1 = getting into position and launching at player
timer = 0;

xspeed = 0;
yspeed = 0;

reflectable = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objTopMan))
{
    instance_destroy();
    exit;
}
event_inherited();

if (global.frozen == false)
{
    image_speed = 22 / 60;
    
    switch (phase)
    {
        case 0: // Idling 
            xspeed = 0;
            yspeed = 0;
            timer += 1;
            if (timer &gt;= 4)
            {
                timer = 0;
                phase = 1;
            }
            break;
        case 1: // Getting into position 
            timer += 1;
            if (timer &gt;= 12 + (number * 9) &amp;&amp; timer &lt; 50)
            {
                xspeed = 0;
                yspeed = 0;
            }
            else if (timer &lt; 50)
            {
                xspeed = image_xscale * (spd / sqrt(2));
                yspeed = -spd / sqrt(2);
            }
            if (timer == 50)
            {
                var useAngle;
                if (instance_exists(target))
                {
                    useAngle = point_direction(x, y,
                        spriteGetXCenterObject(target),
                        spriteGetYCenterObject(target));
                }
                else
                {
                    if (image_xscale == 1)
                        useAngle = 0;
                    else
                        useAngle = 180;
                }
                
                xspeed = cos(degtorad(useAngle)) * 5;
                yspeed = -sin(degtorad(useAngle)) * 5;
            }
            break;
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
