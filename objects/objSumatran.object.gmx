<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSumatran1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// col = &lt;number&gt; (0 = orange (default); 1 = white;)
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 6;

category = "nature";

blockCollision = 1;

facePlayerOnSpawn = true;

// Enemy specific code
yJump = -4.5;
xJump = 2.5;

// AI variables
cooldownMax = 64;
cooldownTimer = cooldownMax - 10;
radius = 80;
doubleJump = 0;

animStorage = 0;
animTimer = 0;

col = 0;
init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    switch (col)
    {
        case 0:
            sprite_index = sprSumatran1;
            break;
        case 1:
            sprite_index = sprSumatran2;
            break;
        default:
            sprite_index = sprSumatran1;
            break;
    }
}

event_inherited();

if (entityCanStep())
{
    // animation
    
    animTimer += 1;
    switch (animStorage)
    {
        case 0:
            image_index = 0 + (floor(animTimer / 10) mod 2);
            break;
        case 1:
            image_index = 2;
            break;
        case 2:
            image_index = 3 + ((animTimer / 10));
            
            if (animTimer &gt;= 10 &amp;&amp; doubleJump == false)
            {
                animTimer = 0;
                animStorage = 0;
                cooldownTimer = 0;
            }
            if (animTimer &gt;= 10 &amp;&amp; doubleJump == true)
            {
                animTimer = 0;
                animStorage = 0;
                cooldownTimer = cooldownMax;
            }
            break;
    }
    
    // move tigger
    xSpeedTurnaround();
    x = ceil(x);
    
    // if tigger is near mega man, add to timer.
    if (instance_exists(target))
    {
        if (abs(x - target.x) &lt;= radius &amp;&amp; animStorage == 0)
        {
            calibrateDirection();
            cooldownTimer += 1;
        }
        
        // whether or not tigger is near mega man determines wheter or not it goes on a rampage.
        if (abs(x - target.x) &lt;= radius)
            doubleJump = false;
        else
            doubleJump = true;
    }
    
    // when countdown timer is met, jump. also jump if fire is pressed and tigger is on ground.
    if (instance_exists(target))
    {
        if ((animStorage == 0 &amp;&amp; cooldownTimer &gt;= cooldownMax)
            || (animStorage == 0 &amp;&amp; global.keyShootPressed[target.playerID]))
        {
            xspeed = xJump * image_xscale;
            yspeed = yJump;
            playSFX(sfxTigerRoar);
            cooldownTimer = 0;
            animStorage = 1;
        }
    }
    
    // when tigger hits the ground, reset variables
    if (ground &amp;&amp; yspeed &gt;= 0 &amp;&amp; animStorage == 1)
    {
        xspeed = 0;
        animTimer = 0;
        animStorage = 2;
        cooldownTimer = 0;
    }
}
else if (dead)
{
    xspeed = 0;
    yspeed = 0;
    image_index = 0;
    animStorage = 0;
    animTimer = 0;
    cooldownTimer = cooldownMax - 10;
    doubleJump = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objHornetChaser, 1);
specialDamageValue(objJewelSatellite, 2);
specialDamageValue(objGrabBuster, 2);
specialDamageValue(objTripleBlade, 1);
specialDamageValue(objWheelCutter, 3);
specialDamageValue(objSlashClaw, 3);
specialDamageValue(objSakugarne, 1);
specialDamageValue(objSuperArrow, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
